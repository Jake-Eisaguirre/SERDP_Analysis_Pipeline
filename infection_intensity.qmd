---
title: "infection_intensity"
format: html
editor: visual
---

## Load Packages

```{r}
#| output: false
if (!require(librarian)){
  install.packages("librarian")
  library(librarian)
}

librarian::shelf(tidyverse, RPostgres, DBI, here, lubridate, mgcv, voxel)

```

## Connect to `survey_data` schema in `ribbitr` database

```{r}
#| output: false
tryCatch({
    drv <- dbDriver("Postgres")
    print("Connecting to Databaseâ€¦")
    connection <- dbConnect(drv,
                 dbname = Sys.getenv("aws_dbname"),
                 host = Sys.getenv("aws_host"),
                 port = Sys.getenv("aws_port"),
                 user = Sys.getenv("aws_user"),
                 password = Sys.getenv("aws_password"),
                 timezone=NULL)
    print("Database Connected!")
    },
    error=function(cond) {
            print("Unable to connect to Database.")
    })

#search path
dbExecute(connection, "set search_path to survey_data")

```

## Query SERDP Bd data - infection intensity `sample_bd_qty`

```{r}

q <- "select r.region, s.site, v.date, v.survey_time,
     s2.detection_type, c.species_capture, sb.bd_swab_id,
     sb.sample_bd_qty
     from region r
     join site s on r.region_id = s.region_id 
     join visit v on s.site_id = v.site_id 
     join survey s2 on v.visit_id = s2.visit_id
     join capture c on s2.survey_id = c.survey_id 
     full join serdp_bd sb on c.bd_swab_id = sb.bd_swab_id
     where r.region = 'pennsylvania'
     and v.date < '2020-12-31';"

raw_int <- dbGetQuery(connection, q)

```

## Clean infection intesity data

### exclude zeros 

```{r}

clean_int <- raw_int %>% 
  drop_na(species_capture) %>% 
  drop_na(bd_swab_id) %>% 
  mutate(sample_bd_qty = if_else(is.na(sample_bd_qty), 0, sample_bd_qty),
         month = month(date),
         year = year(date),
         sample_bd_qty = log10(sample_bd_qty + 1)) %>% 
  rename(log10_bd= sample_bd_qty) %>% 
  filter(log10_bd > 0)


plot(clean_int$date, clean_int$log10_bd)


```

# Mean Annual Seasonal Trend

## Now create loop to run GAM for each species `infection_intensity ~ s(month)`

```{r}

# Create empty objects
species_list <- unique(clean_int$species_capture)

plots <- list()

spec_names <- c()

# Loop through each species
for (i in 1:length(species_list)) {
  
  # find species with low k value
  k <- clean_int %>% 
    filter(species_capture == species_list[i]) %>% 
    mutate(month = month(date)) %>% 
    select(month) %>% 
    unique() %>% 
    nrow()
  
  # only run models for species with k>2
  if (k > 2) {
  
      # add filter species list with k>2   
      spec_names[i] <- species_list[i]
      
      # filter clean data set for species list of k>2
      dat <- clean_int %>% 
        select(species_capture, date, log10_bd) %>%
        filter(species_capture == species_list[i]) %>%  
        mutate(month = month(date)) %>% 
        ungroup() %>% 
        select(!species_capture)
  
      # run GAM per species
      gam <- gam(log10_bd ~ s(month, k = k), data = dat)  
        
        
      
      # create new object in environment for each model output per species
      assign(species_list[i], gam) 
      
      months = seq(min(dat$month), max(dat$month), len=50)
      newdata = data.frame(month=months)
      gam_pred = predict(gam, newdata=newdata, type="response", se.fit = T)
      newdata$pred = gam_pred$fit
      newdata$upper_se <- gam_pred$fit + (2 * gam_pred$se.fit)
      newdata$lower_se <- gam_pred$fit - (2 * gam_pred$se.fit)
      
      # save predictions
      write_rds(as.data.frame(newdata), here("outputs", "infection_intensity","mean_annual_seasonal_trend", paste(species_list[i],".rds", sep = "")))

      average_prev = data.table(dat)[, .(prev=mean(log10_bd)), by=.(month)] 

      # make GAM plot
      p <- ggplot(newdata) + geom_line(aes(x=month, y=pred)) +
                             geom_point(data=average_prev, aes(x=month, y=prev), size=5) +
                             geom_ribbon(aes(ymin = lower_se, ymax= upper_se, x = month), alpha = 0.2, fill = "blue")+
                             xlab("Month") + ylab("Log10 Infection Intensity") + theme_classic() +
                             ylim(c(-0.25, 3.5)) + ggtitle(species_list[i])
      
      
    
      # # make GAM plot
      # p <- plotGAM(gam, smooth.cov = 'month', rawOrFitted = "raw") +
      #      theme_classic() +
      #      ggtitle(paste(species_list[i]))

    
    # save GAM plot in list
     plots[[i]] <- p
    
  
  }
  
  # Error checking during loop
  print(paste("done with", species_list[i]))

}

```

## Examine plots

```{r}


plots[1:length(plots)]


```

# Examine Model Outputs

### Print all GAM model outputs - Make sure to run the above loop to populate correct GAM models

```{r}

ClassFilter <- function(x) inherits(get(x), 'gam')

Objs <- Filter(ClassFilter, ls())

print(Objs)

```

### Select which GAM model to view

```{r}
# Choose species from above list
summary(lithobates_catesbeianus)
```

# Multi Annual Seasonal Trend

## Now create loop to run GAM for each species `infection_intensity ~ s(unix)`

```{r}
# Create empty objects
species_list <- unique(clean_int$species_capture)

plots <- list()

spec_names <- c()

# Loop through each species
for (i in 1:length(species_list)) {
  
  # find species with low k value
  k <- clean_int %>% 
    filter(species_capture == species_list[i]) %>%
    mutate(year_month = as_date(date, format = "%Y-%m"),
           year_month = as.numeric(as.POSIXct(year_month, format = "%Y-%m")),
           year_month = sort(year_month)) %>%  
    select(year_month) %>% 
    unique() %>% 
    nrow()
  
  # only run models for species with k>8
  if (k > 9) {
  
      # add filter species list with k>8   
      spec_names[i] <- species_list[i]
      
      # filter clean data set for species list of k>8
      dat <- clean_int %>% 
        select(species_capture, date, log10_bd) %>% 
        filter(species_capture == species_list[i]) %>%  
        ungroup() %>% 
        select(!species_capture) %>% 
        mutate(unix = as_date(date, format = "%Y-%m"),
               unix = as.numeric(as.POSIXct(unix, format = "%Y-%m")),
               unix = sort(unix)) 

  
      # run GAM per species
      gam <- gam(log10_bd ~ s(unix), data = dat) 
      
      # create new object in environment for each model output per species
      assign(species_list[i], gam) 
      
      # Predictions
      unix = seq(min(dat$unix), max(dat$unix), len=100)
      newdata = data.frame(unix=unix)
      gam_pred = predict(gam, newdata=newdata, type="response", se.fit = T)
      newdata$pred = gam_pred$fit
      newdata$upper_se <- gam_pred$fit + (2 * gam_pred$se.fit)
      newdata$lower_se <- gam_pred$fit - (2 * gam_pred$se.fit)
      
      # save predictions
      write_rds(as.data.frame(newdata), here("outputs", "infection_intensity", "unix_seasonal_trend", paste(species_list[i],".rds", sep = "")))
      
      
      # Average prevalence for plotting
      dat = data.table(dat)
      dat[, c("month", "year"):=.(month(date), year(date))]
      average_prev = dat[, .(prev=mean(log10_bd), mean_unix=mean(unix)), by=.(month, year)] 

      # make GAM plot
      p <- ggplot(newdata) + geom_line(aes(x=unix, y=pred)) +
                             geom_point(data=dat, aes(x=unix, y=log10_bd), size=3, alpha = 0.5) +
                             geom_ribbon(aes(ymin = lower_se, ymax= upper_se, x = unix), alpha = 0.2, fill = "blue")+
                             xlab("Month") + ylab("Log10 Infection Intensity") + theme_classic() +
                             ylim(c(-0.5, 5.4)) + ggtitle(species_list[i])
        
        
        
        
    # save GAM plot in list
     plots[[i]] <- p
    
  
  }
  
  # Error checking during loop
  print(paste("done with", species_list[i]))

}

```

## Examine plots

```{r}


plots[1:length(plots)]


```

## Examine Model Outputs

### Print all GAM model outputs - Make sure to run the above loop to populate correct GAM models

```{r}

ClassFilter <- function(x) inherits(get(x), 'gam')

Objs <- Filter(ClassFilter, ls())

print(Objs)

```

### Select which GAM model to view

```{r}
# Choose species from above list
summary(notophthalmus_viridescens)
```

to do: CI, save mean as csv with upper and lower bound, and predicted time frame