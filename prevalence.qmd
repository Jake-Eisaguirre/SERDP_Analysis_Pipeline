---
title: "bd_prevalence_GAM"
format: html
editor: visual
---

## Load Packages

```{r}
#| output: false
if (!require(librarian)){
  install.packages("librarian")
  library(librarian)
}

librarian::shelf(tidyverse, RPostgres, DBI, here, lubridate, mgcv, voxel, scales, anytime, tidymv, data.table)

```

## Connect to `survey_data` schema in `ribbitr` database

```{r}
#| output: false
tryCatch({
    drv <- dbDriver("Postgres")
    print("Connecting to Database…")
    connection <- dbConnect(drv,
                 dbname = Sys.getenv("aws_dbname"),
                 host = Sys.getenv("aws_host"),
                 port = Sys.getenv("aws_port"),
                 user = Sys.getenv("aws_user"),
                 password = Sys.getenv("aws_password"),
                 timezone=NULL)
    print("Database Connected!")
    },
    error=function(cond) {
            print("Unable to connect to Database.")
    })

#search path
dbExecute(connection, "set search_path to survey_data")

```

```{r}
#| output: false
# library(yaml)
# 
# dbaccess = yaml.load_file("/Users/mqwilber/Repos/panama_amphibian_recovery/code/dbaccess.yml")
# 
# tryCatch({
#     drv <- dbDriver("Postgres")
#     print("Connecting to Database…")
#     connection <- dbConnect(drv,
#                  dbname = dbaccess$aws_dbname,
#                  host = dbaccess$aws_host,
#                  port = dbaccess$aws_port,
#                  user = dbaccess$aws_user,
#                  password = dbaccess$aws_password,
#                  timezone=NULL)
#     print("Database Connected!")
#     },
#     error=function(cond) {
#             print("Unable to connect to Database.")
#     })
# 
# #search path
# dbExecute(connection, "set search_path to survey_data")

```

## Query SERDP Bd data - Prevelance

```{r}

q <- "select r.region, s.site, v.date, v.survey_time,
     s2.detection_type, c.species_capture, sb.bd_swab_id,
     sb.bd_load
     from region r
     join site s on r.region_id = s.region_id 
     join visit v on s.site_id = v.site_id 
     join survey s2 on v.visit_id = s2.visit_id
     join capture c on s2.survey_id = c.survey_id 
     join serdp_bd sb on c.bd_swab_id = sb.bd_swab_id
     where r.region = 'pennsylvania'
     and v.date < '2020-12-31';"

raw_prev <- dbGetQuery(connection, q)

```

## Clean data and add prevalence

```{r}

clean_prev2 <- raw_prev %>% 
  drop_na(bd_swab_id) %>%
  drop_na(species_capture) %>%
  select(site, date, species_capture, bd_load) %>% 
  mutate(infected = case_when(bd_load > 0  ~ 1,
                              is.na(bd_load) ~ 0),
         month = month(date),
         year = year(date))

# View data
data.table(clean_prev2)
                                                  

# not much general trend across time - Maybe slight negative trend through time
plot(clean_prev$date, clean_prev$average_prev)
```

# Mean Annual Seasonal Trend

## Now create loop to run GAM for each species `average_prev ~ s(month)`

```{r}
# Create empty objects
species_list <- unique(clean_prev2$species_capture)

plots <- list()

spec_names <- c()

# Loop through each species
for (i in 1:length(species_list)) {
  
  # find species with low k value
  k <- clean_prev2 %>% 
    filter(species_capture == species_list[i]) %>% 
    mutate(month = month(date)) %>% 
    select(month) %>% 
    unique() %>% 
    nrow()
  
  # only run models for species with k>2
  if (k > 2) {
  
      # add filter species list with k>2   
      spec_names[i] <- species_list[i]
      
      # filter clean data set for species list of k>2
      dat <- clean_prev2 %>% 
        select(species_capture, date, infected) %>% # (, n, n_infected) add these for offset model
        filter(species_capture == species_list[i]) %>%  
        mutate(month = month(date))
  
      # run GAM per species
      gam <- gam(infected ~ s(month, k = k), data = dat, family = binomial(link = "logit"))  
        
        
      # create new object in environment for each model output per species
      assign(species_list[i], gam) 

      months = seq(min(dat$month), max(dat$month), len=50)
      newdata = data.frame(month=months)
      gam_pred = predict(gam, newdata=newdata, type="response", se.fit = T)
      newdata$pred = gam_pred$fit
      newdata$upper_se <- gam_pred$fit + (2 * gam_pred$se.fit)
      newdata$lower_se <- gam_pred$fit - (2 * gam_pred$se.fit)
      
      # save predictions
      write_rds(as.data.frame(newdata), here("outputs", "prevalence","mean_annual_seasonal_trend", paste(species_list[i],".rds", sep = "")))
      
      
      average_prev <- dat %>% 
        group_by(month) %>% 
        mutate(prev = mean(infected))
      

      #average_prev = data.table(dat)[, .(prev=mean(infected)), by=.(month)] 

      # make GAM plot
      p <- ggplot(newdata) + geom_line(aes(x=month, y=pred)) +
                             geom_point(data=average_prev, aes(x=month, y=prev), size=5) +
                             geom_ribbon(aes(ymin = lower_se, ymax= upper_se, x = month), alpha = 0.2, fill = "blue")+
                             xlab("Month") + ylab("Probability of infection") + theme_classic() +
                             coord_cartesian(ylim = c(0,1))  + ggtitle(species_list[i])
      
    # save GAM plot in list
     plots[[i]] <- p
    
  }
  
  # Error checking during loop
  print(paste("done with", species_list[i]))

}

```

## Examine plots

```{r}


plots[1:length(plots)]


```

## Save plots
```{r}
for (i in 1:length(plots)) {
  
  ggsave(here("figures", "prevalence", "mean_annual_seasonal_trend", paste(species_list[i], ".jpeg", sep="")),
         plot = plots[[i]])
  
}

```


## Examine Model Outputs

### Print all GAM model outputs - Make sure to run the above loop to populate correct GAM models

```{r}

ClassFilter <- function(x) inherits(get(x), 'gam')

Objs <- Filter(ClassFilter, ls())

print(Objs)

```

### Select which GAM model to view

```{r}
# Choose species from above list
summary(lithobates_catesbeianus)
```

# Multi Annual Seasonal Trend

## Now create loop to run GAM for each species `average_prev ~ s(unix)`

```{r}
# Create empty objects
species_list <- unique(clean_prev2$species_capture)

plots <- list()

spec_names <- c()

# Loop through each species
for (i in 1:length(species_list)) {
  
  # find species with low k value
  k <- clean_prev2 %>% 
    filter(species_capture == species_list[i]) %>%
    mutate(year_month = as_date(date, format = "%Y-%m"),
           year_month = as.numeric(as.POSIXct(year_month, format = "%Y-%m")),
           year_month = sort(year_month)) %>%  
    select(year_month) %>% 
    unique() %>% 
    nrow()
  
  # only run models for species with k>8
  if (k > 9) {
  
      # add filter species list with k>8 - 3 species have too little data    
      spec_names[i] <- species_list[i]
      
      # filter clean data set for species list of k>8
      dat <- clean_prev2 %>% 
        select(species_capture, date, infected) %>% 
        filter(species_capture == species_list[i]) %>%  
        ungroup() %>% 
        select(!species_capture) %>% 
        mutate(unix = as_date(date, format = "%Y-%m"),
               unix = as.numeric(as.POSIXct(unix, format = "%Y-%m")),
               unix = sort(unix)) 

      # run GAM per species
      gam <- gam(infected ~ s(unix), data = dat, family = binomial(link = "logit")) 
      
      # create new object in environment for each model output per species
      assign(species_list[i], gam) 
      
      # Predictions
      unix = seq(min(dat$unix), max(dat$unix), len=100)
      newdata = data.frame(unix=unix)
      gam_pred = predict(gam, newdata=newdata, type="response", se.fit = T)
      newdata$pred = gam_pred$fit
      newdata$upper_se <- gam_pred$fit + (2 * gam_pred$se.fit)
      newdata$lower_se <- gam_pred$fit - (2 * gam_pred$se.fit)
      
      # save predictions
      write_rds(as.data.frame(newdata), here("outputs", "prevalence", "unix_seasonal_trend", paste(species_list[i],".rds", sep = "")))
      
      # Average prevalence for plotting
      dat = data.table(dat)
      dat[, c("month", "year"):=.(month(date), year(date))]
      average_prev = dat[, .(prev=mean(infected), mean_unix=mean(unix)), by=.(month, year)] 

      # make GAM plot
      p <- ggplot(newdata) + geom_line(aes(x=unix, y=pred)) +
                             geom_point(data=average_prev, aes(x=mean_unix, y=prev), size=5) +
                             geom_ribbon(aes(ymin = lower_se, ymax= upper_se, x = unix), alpha = 0.2, fill = "blue")+
                             xlab("Month") + ylab("Probability of infection") + theme_classic() +
                             coord_cartesian(ylim = c(0,1))  + 
                             ggtitle(species_list[i])
        
        
    # save GAM plot in list
     plots[[i]] <- p
    
  
  }
  
  # Error checking during loop
  print(paste("done with", species_list[i]))

}
```

## Examine plots

```{r}


plots[1:length(plots)]


```

## Save plots

```{r}
for (i in 1:length(plots)) {
  
  ggsave(here("figures", "prevalence", "unix_seasonal_trend", paste(species_list[i], ".jpeg", sep="")),
         plot = plots[[i]])
  
}

```

## Examine Model Outputs

### Print all GAM model outputs - Make sure to run the above loop to populate correct GAM models

```{r}

ClassFilter <- function(x) inherits(get(x), 'gam')

Objs <- Filter(ClassFilter, ls())

print(Objs)

```

### Select which GAM model to view

```{r}
# Choose species from above list
summary(notophthalmus_viridescens)
```

To do: extract standard errors/CI 












# Practice

## GAM Model `average_prev ~ s(month)` per species - PRACTICE ON ONE SPECIES

### Questions:

-   k is basis function which is what? how many time intervals? Amount a function is ran over the data?

    -   **Mark here**: $k$ essentially describes how many parameters our regression model will have. The more parameters, the more flexibility to fit the data (which can also lead to over fitting).

-   How to set k? Always choose max interval?

    -   **Mark here**: By default, the GAM function `s()` uses a *thin-plate regression spline* that regularizes/penalizes the spline so it is not too wiggly. Thus, you want to ensure $k$ is large so you have the flexibility that you need to fit the data, and then the this plate regression will penalize away the extra complexity.

-   How to choose sp?

    -   **Mark here**: What sp are you referring to?

-   What is the transformation applied to y axis?

    -   **Mark here**: See my code above. With family `binomial("logit")` the predictions are made on the log odds (logit) scale. If you want predictions on the *response* scale (i.e., in terms of probabilities, you just need to tell the `predict` function that this is what you want.

-   Do we only want to examine trend with time/month? Do we want to add other predictors? (multivariate?)

    -   **Mark here**: As a first pass, the time trend is really all we need.

-   How come some models predict a prevalence greater then 1 and less then 0 even with logit link?! (Very confused)

    -   **Mark here**: Two reasons. First, you had a bug where you wrote "famliy" instead of "family" so the model was actually fitting a gaussian. Second, we want to fit the model to the 0 and 1 data not the average infection data.

-   Betar or Binomial regression?

    -   **Mark here**: Binomial regression is what we want.

-   What `method` do we choose? `GCV.Cp`?

    -   **Mark here**: `GCV.Cp` is a good one to use

-   How do I read the significant results section?

    -   **Mark here**: The significance section is essentially asking "Does the spline term improve the fit relative to the model without the spline term?". If you have a significant spline term then, yes, the model with the spline term does a better job describing the data than a model without the spline term.

-   Concurvity check does what?

    -   **Mark here**: We don't have to worry about this with just one smooth term in the model. It is essentially testing for a type of collinearity -- are multiple smooth terms describing the same variation?

```{r}
# Bullfrog test

bull_dat <- clean_prev %>% 
  select(species_capture, average_prev, date) %>% 
  filter(species_capture == "lithobates_catesbeianus") %>% 
  ungroup() %>% 
  select(!species_capture) %>% 
  mutate(unix = as_date(year_month, format = "%Y-%m"),
         unix = as.numeric(as.POSIXct(unix, format = "%Y-%m")),
         unix = sort(unix))

bull_gam <- mgcv::gam(average_prev ~ s(unix, k = 19), data = bull_dat, faimly = binomial(link = "logit"))

summary(bull_gam)

plot(bull_gam, residuals = TRUE, pch = 1)

coef(bull_gam)

bull_gam$sp

plot(bull_gam, shade = T, shade.col = "lightgreen",
     shift = coef(bull_gam)[1], seWithMean = T)

labels <- c("2017-3", "2017-4", "2017-5", "2017-6", "2017-7", "2017-8", "2017-9", "2018-4", "2018-5",  
            "2018-6", "2018-7", "2018-8", "2018-9", "2018-10", "2019-4", "2019-5", "2019-6", "2019-7",
            "2019-10") 

plotGAM(a, smooth.cov = 'month') +
  theme_classic() +
  geom_point(data = a, aes(x=month, y = average_prev), alpha = 0.08, pch = 1)

gam.check(bull_gam)

concurvity(bull_gam, full = T)




t <- clean_prev %>% 
  filter(species_capture == "lithobates_catesbeianus") %>% 
  mutate(month = month(date))

b <- gam(n_infected ~ s(month, k = 8)+ offset(log(n)), data = t, faimly = poisson(link = "log"))

plotGAM(b, smooth.cov = 'month', rawOrFitted = "raw")
```
